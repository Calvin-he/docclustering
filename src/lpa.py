<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  


  <head>
    <title>
      lpa.py on Ticket #627 – Attachment
     – NetworkX Developer Zone
    </title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <!--[if IE]><script type="text/javascript">window.location.hash = window.location.hash;</script><![endif]-->
        <link rel="search" href="/trac/search" />
        <link rel="help" href="/trac/wiki/TracGuide" />
        <link rel="alternate" href="/trac/raw-attachment/ticket/627/lpa.py" type="text/x-python; charset=utf-8" title="Original Format" />
        <link rel="up" href="/trac/ticket/627" title="Ticket #627" />
        <link rel="start" href="/trac/wiki" />
        <link rel="stylesheet" href="/trac/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/trac/pygments/trac.css" type="text/css" /><link rel="stylesheet" href="/trac/chrome/common/css/code.css" type="text/css" />
        <link rel="shortcut icon" href="/trac/chrome/common/trac.ico" type="image/x-icon" />
        <link rel="icon" href="/trac/chrome/common/trac.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/trac/search/opensearch" title="Search NetworkX Developer Zone" />
    <script type="text/javascript" src="/trac/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/trac/chrome/common/js/babel.js"></script><script type="text/javascript" src="/trac/chrome/common/js/trac.js"></script><script type="text/javascript" src="/trac/chrome/common/js/search.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/trac/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
      <script type="text/javascript" src="/trac/chrome/common/js/folding.js"></script>
      <script type="text/javascript">
        jQuery(document).ready(function($) {
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
        });
      </script>
    <link rel="stylesheet" type="text/css" href="/trac/chrome/site/style.css" />
    <link rel="stylesheet" type="text/css" href="http://networkx.lanl.gov/_static/trac.css" />
  </head>
  <body>
    <div id="siteheader">
      This Trac site is no longer active.  See <a href="http://github.com/networkx/"> http://github.com/networkx</a>.
    </div>
    <div id="banner">
      <div id="header">
        <h1><a href="http://networkx.lanl.gov/">NetworkX Developer Zone</a></h1>
      </div>
      <form id="search" action="/trac/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/trac/login">Login</a></li><li><a href="/trac/prefs">Preferences</a></li><li class="last"><a href="/trac/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/trac/wiki">Home</a></li><li><a href="https://github.com/networkx/networkx/commits/master">Timeline</a></li><li><a href="https://github.com/networkx/networkx/issues/milestones">Roadmap</a></li><li><a href="https://github.com/networkx/networkx">Browse Source</a></li><li class="last"><a href="https://github.com/networkx/networkx/issues?state=open">View Tickets</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
              <li class="last first"><a href="/trac/ticket/627">Back to Ticket #627</a></li>
          </ul>
        <hr />
      </div>
      <div id="notice" class="system-message">
          Attachments you submit will be routed for moderation.  If you have an account, please <a href="/trac/login">log in</a> first.
      </div>
    <div id="content" class="attachment">
        <h1><a href="/trac/ticket/627">Ticket #627</a>: lpa.py</h1>
        <table id="info" summary="Description">
          <tbody>
            <tr>
              <th scope="col">File lpa.py,
                <span title="8196 bytes">8.0 KB</span>
                (added by aric, <a class="timeline" href="/trac/timeline?from=2011-08-28T17%3A15%3A05-06%3A00&amp;precision=second" title="2011-08-28T17:15:05-06:00 in Timeline">16 months</a> ago)</th>
            </tr>
            <tr>
              <td class="message searchable">
                
              </td>
            </tr>
          </tbody>
        </table>
        <div id="preview" class="searchable">
          
  <table class="code"><thead><tr><th class="lineno" title="Line numbers">Line</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td><span class="c">#! /usr/bin/python</span></td></tr><tr><th id="L2"><a href="#L2">2</a></th><td><span class="sd">"""Finds the communities via the label propagation algorithm."""</span></td></tr><tr><th id="L3"><a href="#L3">3</a></th><td></td></tr><tr><th id="L4"><a href="#L4">4</a></th><td><span class="kn">import</span> <span class="nn">networkx</span> <span class="kn">as</span> <span class="nn">nx</span></td></tr><tr><th id="L5"><a href="#L5">5</a></th><td><span class="kn">import</span> <span class="nn">os</span></td></tr><tr><th id="L6"><a href="#L6">6</a></th><td><span class="kn">import</span> <span class="nn">re</span></td></tr><tr><th id="L7"><a href="#L7">7</a></th><td><span class="kn">import</span> <span class="nn">sys</span></td></tr><tr><th id="L8"><a href="#L8">8</a></th><td><span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> OptionParser</td></tr><tr><th id="L9"><a href="#L9">9</a></th><td></td></tr><tr><th id="L10"><a href="#L10">10</a></th><td>__all__ <span class="o">=</span> <span class="p">[</span> <span class="s">"semisynchronous_prec_max"</span> <span class="p">,</span> <span class="s">"print_communities"</span> <span class="p">]</span></td></tr><tr><th id="L11"><a href="#L11">11</a></th><td></td></tr><tr><th id="L12"><a href="#L12">12</a></th><td>USAGE <span class="o">=</span> <span class="s">"%prog [OPTION ...] NETWORK_DESCRIPTION"</span></td></tr><tr><th id="L13"><a href="#L13">13</a></th><td>USE_DESCRIPTION <span class="o">=</span> <span class="s">"The NETWORK_DESCRIPTION file must be an adjacency list."</span></td></tr><tr><th id="L14"><a href="#L14">14</a></th><td>parser <span class="o">=</span> OptionParser<span class="p">(</span> USAGE <span class="p">,</span> description<span class="o">=</span>__doc__ <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> USE_DESCRIPTION <span class="p">)</span></td></tr><tr><th id="L15"><a href="#L15">15</a></th><td>parser<span class="o">.</span>set_defaults<span class="p">(</span> verbosity<span class="o">=</span><span class="bp">None</span> <span class="p">)</span></td></tr><tr><th id="L16"><a href="#L16">16</a></th><td>parser<span class="o">.</span>add_option<span class="p">(</span> <span class="s">"-a"</span> <span class="p">,</span> <span class="s">"--adj"</span><span class="p">,</span></td></tr><tr><th id="L17"><a href="#L17">17</a></th><td>    action<span class="o">=</span><span class="s">"store_const"</span><span class="p">,</span></td></tr><tr><th id="L18"><a href="#L18">18</a></th><td>    const<span class="o">=</span><span class="s">"adj"</span><span class="p">,</span></td></tr><tr><th id="L19"><a href="#L19">19</a></th><td>    dest<span class="o">=</span><span class="s">"reader_format"</span><span class="p">,</span></td></tr><tr><th id="L20"><a href="#L20">20</a></th><td>    help<span class="o">=</span><span class="s">"Indicates that the description file is in adjacency list format."</span></td></tr><tr><th id="L21"><a href="#L21">21</a></th><td><span class="p">)</span></td></tr><tr><th id="L22"><a href="#L22">22</a></th><td>parser<span class="o">.</span>add_option<span class="p">(</span> <span class="s">"-g"</span> <span class="p">,</span> <span class="s">"--gml"</span><span class="p">,</span></td></tr><tr><th id="L23"><a href="#L23">23</a></th><td>    action<span class="o">=</span><span class="s">"store_const"</span><span class="p">,</span></td></tr><tr><th id="L24"><a href="#L24">24</a></th><td>    const<span class="o">=</span><span class="s">"gml"</span><span class="p">,</span></td></tr><tr><th id="L25"><a href="#L25">25</a></th><td>    dest<span class="o">=</span><span class="s">"reader_format"</span><span class="p">,</span></td></tr><tr><th id="L26"><a href="#L26">26</a></th><td>    help<span class="o">=</span><span class="s">"Indicates that the description file is in GML format."</span></td></tr><tr><th id="L27"><a href="#L27">27</a></th><td><span class="p">)</span></td></tr><tr><th id="L28"><a href="#L28">28</a></th><td>parser<span class="o">.</span>add_option<span class="p">(</span> <span class="s">"-l"</span> <span class="p">,</span> <span class="s">"--log-verbosity"</span><span class="p">,</span></td></tr><tr><th id="L29"><a href="#L29">29</a></th><td>    action<span class="o">=</span><span class="s">"append"</span><span class="p">,</span></td></tr><tr><th id="L30"><a href="#L30">30</a></th><td>    metavar<span class="o">=</span><span class="s">"FILE"</span><span class="p">,</span></td></tr><tr><th id="L31"><a href="#L31">31</a></th><td>    dest<span class="o">=</span><span class="s">"verbosity"</span><span class="p">,</span></td></tr><tr><th id="L32"><a href="#L32">32</a></th><td>    help<span class="o">=</span><span class="s">"Verbosely inform the user of the ongoings of the computation "</span></td></tr><tr><th id="L33"><a href="#L33">33</a></th><td>         <span class="s">"logging to FILE. Last indicated verbosity level trumps all."</span></td></tr><tr><th id="L34"><a href="#L34">34</a></th><td><span class="p">)</span></td></tr><tr><th id="L35"><a href="#L35">35</a></th><td>parser<span class="o">.</span>add_option<span class="p">(</span> <span class="s">"-v"</span> <span class="p">,</span> <span class="s">"--verbose"</span><span class="p">,</span></td></tr><tr><th id="L36"><a href="#L36">36</a></th><td>    action<span class="o">=</span><span class="s">"append_const"</span><span class="p">,</span></td></tr><tr><th id="L37"><a href="#L37">37</a></th><td>    const<span class="o">=</span><span class="s">"stdout"</span><span class="p">,</span></td></tr><tr><th id="L38"><a href="#L38">38</a></th><td>    dest<span class="o">=</span><span class="s">"verbosity"</span><span class="p">,</span></td></tr><tr><th id="L39"><a href="#L39">39</a></th><td>    help<span class="o">=</span><span class="s">"Verbosely inform the user of the ongoings of the computation to "</span></td></tr><tr><th id="L40"><a href="#L40">40</a></th><td>         <span class="s">"stdout. Last indicated verbosity level trumps all."</span></td></tr><tr><th id="L41"><a href="#L41">41</a></th><td><span class="p">)</span></td></tr><tr><th id="L42"><a href="#L42">42</a></th><td></td></tr><tr><th id="L43"><a href="#L43">43</a></th><td><span class="c"># mapping of file formats to networkx reading functions</span></td></tr><tr><th id="L44"><a href="#L44">44</a></th><td>network_reader <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span></td></tr><tr><th id="L45"><a href="#L45">45</a></th><td>network_reader<span class="p">[</span><span class="s">'adj'</span><span class="p">]</span> <span class="o">=</span> nx<span class="o">.</span>read_adjlist</td></tr><tr><th id="L46"><a href="#L46">46</a></th><td>network_reader<span class="p">[</span><span class="s">'gml'</span><span class="p">]</span> <span class="o">=</span> nx<span class="o">.</span>read_gml</td></tr><tr><th id="L47"><a href="#L47">47</a></th><td></td></tr><tr><th id="L48"><a href="#L48">48</a></th><td>verbose_stream <span class="o">=</span> <span class="bp">None</span></td></tr><tr><th id="L49"><a href="#L49">49</a></th><td></td></tr><tr><th id="L50"><a href="#L50">50</a></th><td><span class="k">def</span> <span class="nf">main</span><span class="p">():</span></td></tr><tr><th id="L51"><a href="#L51">51</a></th><td>    <span class="p">(</span> opts <span class="p">,</span> args <span class="p">)</span> <span class="o">=</span> parser<span class="o">.</span>parse_args<span class="p">()</span></td></tr><tr><th id="L52"><a href="#L52">52</a></th><td>    __validate_opts_and_args<span class="p">(</span> opts <span class="p">,</span> args <span class="p">)</span></td></tr><tr><th id="L53"><a href="#L53">53</a></th><td>    __setup_verbosity<span class="p">(</span> opts<span class="o">.</span>verbosity <span class="p">)</span></td></tr><tr><th id="L54"><a href="#L54">54</a></th><td>    __inform_user<span class="p">(</span> <span class="s">"parsing network ..."</span> <span class="p">)</span></td></tr><tr><th id="L55"><a href="#L55">55</a></th><td>    network <span class="o">=</span> network_reader<span class="p">[</span>opts<span class="o">.</span>reader_format<span class="p">](</span> args<span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span></td></tr><tr><th id="L56"><a href="#L56">56</a></th><td>    communities <span class="o">=</span> semisynchronous_prec_max<span class="p">(</span> network <span class="p">)</span></td></tr><tr><th id="L57"><a href="#L57">57</a></th><td>    print_communities<span class="p">(</span> communities <span class="p">)</span></td></tr><tr><th id="L58"><a href="#L58">58</a></th><td></td></tr><tr><th id="L59"><a href="#L59">59</a></th><td><span class="k">def</span> <span class="nf">semisynchronous_prec_max</span><span class="p">(</span> network <span class="p">):</span></td></tr><tr><th id="L60"><a href="#L60">60</a></th><td>    <span class="sd">"""Main functionality of the LPA algorithm.</span></td></tr><tr><th id="L61"><a href="#L61">61</a></th><td><span class="sd"></span></td></tr><tr><th id="L62"><a href="#L62">62</a></th><td><span class="sd">       Factored out of the main method for external usage.</span></td></tr><tr><th id="L63"><a href="#L63">63</a></th><td><span class="sd">    """</span></td></tr><tr><th id="L64"><a href="#L64">64</a></th><td>    __inform_user<span class="p">(</span> <span class="s">"coloring network ..."</span> <span class="p">)</span></td></tr><tr><th id="L65"><a href="#L65">65</a></th><td>    coloring <span class="o">=</span> __color_network<span class="p">(</span> network <span class="p">)</span></td></tr><tr><th id="L66"><a href="#L66">66</a></th><td>    __inform_user<span class="p">(</span> <span class="s">"uniquely labeling network ..."</span> <span class="p">)</span></td></tr><tr><th id="L67"><a href="#L67">67</a></th><td>    labeling <span class="o">=</span> __uniquely_label<span class="p">(</span> network <span class="p">)</span></td></tr><tr><th id="L68"><a href="#L68">68</a></th><td>    nrounds <span class="o">=</span> <span class="mi">1</span></td></tr><tr><th id="L69"><a href="#L69">69</a></th><td>    <span class="k">while</span> <span class="ow">not</span> __labeling_complete<span class="p">(</span> labeling <span class="p">,</span> network <span class="p">):</span></td></tr><tr><th id="L70"><a href="#L70">70</a></th><td>        nrounds <span class="o">+=</span> <span class="mi">1</span></td></tr><tr><th id="L71"><a href="#L71">71</a></th><td>        __update_labels<span class="p">(</span> labeling <span class="p">,</span> coloring <span class="p">,</span> network <span class="p">)</span></td></tr><tr><th id="L72"><a href="#L72">72</a></th><td>    communities <span class="o">=</span> __form_communities<span class="p">(</span> labeling <span class="p">,</span> network <span class="p">)</span></td></tr><tr><th id="L73"><a href="#L73">73</a></th><td>    <span class="k">return</span> communities</td></tr><tr><th id="L74"><a href="#L74">74</a></th><td></td></tr><tr><th id="L75"><a href="#L75">75</a></th><td><span class="k">def</span> <span class="nf">print_communities</span><span class="p">(</span> communities <span class="p">):</span></td></tr><tr><th id="L76"><a href="#L76">76</a></th><td>    <span class="sd">"""Prints the supplied dict() which maps labels to sets of nodes.</span></td></tr><tr><th id="L77"><a href="#L77">77</a></th><td><span class="sd"></span></td></tr><tr><th id="L78"><a href="#L78">78</a></th><td><span class="sd">       Supplied dict() should be the results of an LPA community detection.</span></td></tr><tr><th id="L79"><a href="#L79">79</a></th><td><span class="sd">    """</span></td></tr><tr><th id="L80"><a href="#L80">80</a></th><td>    <span class="k">for</span> l<span class="p">,</span> nodes <span class="ow">in</span> communities<span class="o">.</span>items<span class="p">():</span></td></tr><tr><th id="L81"><a href="#L81">81</a></th><td>        node_list <span class="o">=</span> <span class="p">[</span> <span class="nb">str</span><span class="p">(</span>n<span class="p">)</span> <span class="k">for</span> n <span class="ow">in</span> nodes <span class="p">]</span></td></tr><tr><th id="L82"><a href="#L82">82</a></th><td>        <span class="k">print</span> re<span class="o">.</span>sub<span class="p">(</span> <span class="s">"[\[,\]]"</span> <span class="p">,</span> <span class="s">""</span> <span class="p">,</span> <span class="s">"{0}: {1}"</span><span class="o">.</span>format<span class="p">(</span>l<span class="p">,</span>node_list<span class="p">)</span> <span class="p">)</span></td></tr><tr><th id="L83"><a href="#L83">83</a></th><td></td></tr><tr><th id="L84"><a href="#L84">84</a></th><td><span class="k">def</span> <span class="nf">__break_color_tie</span><span class="p">(</span> current <span class="p">,</span> labels <span class="p">):</span></td></tr><tr><th id="L85"><a href="#L85">85</a></th><td>    <span class="sd">"""Uses Prec-Max tie-breaking to break the ties, as laid out in:</span></td></tr><tr><th id="L86"><a href="#L86">86</a></th><td><span class="sd">       'Community Detection via Semi-Synchronous Label Propagation Algorithms'</span></td></tr><tr><th id="L87"><a href="#L87">87</a></th><td><span class="sd">       Cordasco and Gargano, 2011</span></td></tr><tr><th id="L88"><a href="#L88">88</a></th><td><span class="sd"></span></td></tr><tr><th id="L89"><a href="#L89">89</a></th><td><span class="sd">       If the labels set specified is empty than the current label is returned.</span></td></tr><tr><th id="L90"><a href="#L90">90</a></th><td><span class="sd"></span></td></tr><tr><th id="L91"><a href="#L91">91</a></th><td><span class="sd">       Specified set of labels is assummed to be one of integers.</span></td></tr><tr><th id="L92"><a href="#L92">92</a></th><td><span class="sd">    """</span></td></tr><tr><th id="L93"><a href="#L93">93</a></th><td>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span>labels<span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> current <span class="ow">in</span> labels<span class="p">:</span></td></tr><tr><th id="L94"><a href="#L94">94</a></th><td>        new_label <span class="o">=</span> current</td></tr><tr><th id="L95"><a href="#L95">95</a></th><td>    <span class="k">else</span><span class="p">:</span></td></tr><tr><th id="L96"><a href="#L96">96</a></th><td>        <span class="c"># freakin' no built-in max function on sets!</span></td></tr><tr><th id="L97"><a href="#L97">97</a></th><td>        mx <span class="o">=</span> <span class="o">-</span><span class="p">(</span>sys<span class="o">.</span>maxint<span class="p">)</span> <span class="o">-</span> <span class="mi">1</span></td></tr><tr><th id="L98"><a href="#L98">98</a></th><td>        <span class="k">for</span> c <span class="ow">in</span> labels<span class="p">:</span></td></tr><tr><th id="L99"><a href="#L99">99</a></th><td>            mx <span class="o">=</span> c <span class="k">if</span> c <span class="o">&gt;</span> mx <span class="k">else</span> mx</td></tr><tr><th id="L100"><a href="#L100">100</a></th><td>        new_label <span class="o">=</span> mx</td></tr><tr><th id="L101"><a href="#L101">101</a></th><td>    <span class="k">return</span> new_label</td></tr><tr><th id="L102"><a href="#L102">102</a></th><td></td></tr><tr><th id="L103"><a href="#L103">103</a></th><td><span class="k">def</span> <span class="nf">__calculate_label_frequencies</span><span class="p">(</span> node <span class="p">,</span> labeling <span class="p">,</span> network <span class="p">):</span></td></tr><tr><th id="L104"><a href="#L104">104</a></th><td>    <span class="sd">"""Counts up the labels of the neighbors of the specified node. Returns a</span></td></tr><tr><th id="L105"><a href="#L105">105</a></th><td><span class="sd">       dictionary from the label to the frequency.</span></td></tr><tr><th id="L106"><a href="#L106">106</a></th><td><span class="sd">    """</span></td></tr><tr><th id="L107"><a href="#L107">107</a></th><td>    counts <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span></td></tr><tr><th id="L108"><a href="#L108">108</a></th><td>    <span class="k">for</span> q <span class="ow">in</span> network<span class="o">.</span>neighbors<span class="p">(</span> node <span class="p">):</span></td></tr><tr><th id="L109"><a href="#L109">109</a></th><td>        qlabel <span class="o">=</span> labeling<span class="p">[</span>q<span class="p">]</span></td></tr><tr><th id="L110"><a href="#L110">110</a></th><td>        counts<span class="p">[</span>qlabel<span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">if</span> qlabel <span class="ow">not</span> <span class="ow">in</span> counts <span class="k">else</span> counts<span class="p">[</span>qlabel<span class="p">]</span> <span class="o">+</span> <span class="mi">1</span></td></tr><tr><th id="L111"><a href="#L111">111</a></th><td>    <span class="k">return</span> counts</td></tr><tr><th id="L112"><a href="#L112">112</a></th><td></td></tr><tr><th id="L113"><a href="#L113">113</a></th><td><span class="k">def</span> <span class="nf">__color_network</span><span class="p">(</span> net <span class="p">):</span></td></tr><tr><th id="L114"><a href="#L114">114</a></th><td>    <span class="sd">"""Colors the network so that neighboring nodes all have distinct colors.</span></td></tr><tr><th id="L115"><a href="#L115">115</a></th><td><span class="sd">       Returns a dict of set of nodes and also a lookup of nodes to colors, in a</span></td></tr><tr><th id="L116"><a href="#L116">116</a></th><td><span class="sd">       tuple in that order.</span></td></tr><tr><th id="L117"><a href="#L117">117</a></th><td><span class="sd">    """</span></td></tr><tr><th id="L118"><a href="#L118">118</a></th><td>    coloring <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span> <span class="c"># color =&gt; set(node)</span></td></tr><tr><th id="L119"><a href="#L119">119</a></th><td>    lookup <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span> <span class="c"># node =&gt; color</span></td></tr><tr><th id="L120"><a href="#L120">120</a></th><td>    finally_colored_nodes <span class="o">=</span> <span class="nb">set</span><span class="p">()</span></td></tr><tr><th id="L121"><a href="#L121">121</a></th><td>    <span class="k">for</span> n <span class="ow">in</span> net<span class="o">.</span>nodes<span class="p">():</span></td></tr><tr><th id="L122"><a href="#L122">122</a></th><td>        color <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> n <span class="ow">not</span> <span class="ow">in</span> lookup <span class="k">else</span> lookup<span class="p">[</span>n<span class="p">]</span></td></tr><tr><th id="L123"><a href="#L123">123</a></th><td>        lookup<span class="p">[</span>n<span class="p">]</span> <span class="o">=</span> color</td></tr><tr><th id="L124"><a href="#L124">124</a></th><td>        finally_colored_nodes<span class="o">.</span>add<span class="p">(</span> n <span class="p">)</span></td></tr><tr><th id="L125"><a href="#L125">125</a></th><td>        <span class="k">if</span> color <span class="ow">not</span> <span class="ow">in</span> coloring<span class="p">:</span> coloring<span class="p">[</span>color<span class="p">]</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span></td></tr><tr><th id="L126"><a href="#L126">126</a></th><td>        coloring<span class="p">[</span>color<span class="p">]</span><span class="o">.</span>add<span class="p">(</span> n <span class="p">)</span></td></tr><tr><th id="L127"><a href="#L127">127</a></th><td>        <span class="k">for</span> q <span class="ow">in</span> net<span class="o">.</span>neighbors<span class="p">(</span> n <span class="p">):</span></td></tr><tr><th id="L128"><a href="#L128">128</a></th><td>            <span class="k">if</span> q <span class="ow">not</span> <span class="ow">in</span> finally_colored_nodes<span class="p">:</span> lookup<span class="p">[</span>q<span class="p">]</span> <span class="o">=</span> lookup<span class="p">[</span>n<span class="p">]</span> <span class="o">+</span> <span class="mi">1</span></td></tr><tr><th id="L129"><a href="#L129">129</a></th><td>    <span class="k">return</span> coloring</td></tr><tr><th id="L130"><a href="#L130">130</a></th><td></td></tr><tr><th id="L131"><a href="#L131">131</a></th><td><span class="k">def</span> <span class="nf">__form_communities</span><span class="p">(</span> labeling <span class="p">,</span> network <span class="p">):</span></td></tr><tr><th id="L132"><a href="#L132">132</a></th><td>    <span class="sd">"""Determines the communities from the labels of the network, returning a</span></td></tr><tr><th id="L133"><a href="#L133">133</a></th><td><span class="sd">       dict of sets of nodes.</span></td></tr><tr><th id="L134"><a href="#L134">134</a></th><td><span class="sd">    """</span></td></tr><tr><th id="L135"><a href="#L135">135</a></th><td>    communities <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span> <span class="c"># label =&gt; set(nodes)</span></td></tr><tr><th id="L136"><a href="#L136">136</a></th><td>    <span class="k">for</span> n <span class="ow">in</span> network<span class="o">.</span>nodes<span class="p">():</span></td></tr><tr><th id="L137"><a href="#L137">137</a></th><td>        label <span class="o">=</span> labeling<span class="p">[</span>n<span class="p">]</span></td></tr><tr><th id="L138"><a href="#L138">138</a></th><td>        <span class="k">if</span> label <span class="ow">not</span> <span class="ow">in</span> communities<span class="p">:</span> communities<span class="p">[</span>label<span class="p">]</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span></td></tr><tr><th id="L139"><a href="#L139">139</a></th><td>        communities<span class="p">[</span>label<span class="p">]</span><span class="o">.</span>add<span class="p">(</span> n <span class="p">)</span></td></tr><tr><th id="L140"><a href="#L140">140</a></th><td>    <span class="k">return</span> communities</td></tr><tr><th id="L141"><a href="#L141">141</a></th><td></td></tr><tr><th id="L142"><a href="#L142">142</a></th><td><span class="k">def</span> <span class="nf">__inform_user</span><span class="p">(</span> msg <span class="p">):</span></td></tr><tr><th id="L143"><a href="#L143">143</a></th><td>    <span class="sd">"""Writes supplied statement if verbosity is turned on."""</span></td></tr><tr><th id="L144"><a href="#L144">144</a></th><td>    <span class="k">if</span> verbose_stream <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span> verbose_stream<span class="o">.</span>write<span class="p">(</span> msg <span class="o">+</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span> <span class="p">)</span></td></tr><tr><th id="L145"><a href="#L145">145</a></th><td></td></tr><tr><th id="L146"><a href="#L146">146</a></th><td><span class="k">def</span> <span class="nf">__labeling_complete</span><span class="p">(</span> labeling <span class="p">,</span> network <span class="p">):</span></td></tr><tr><th id="L147"><a href="#L147">147</a></th><td>    <span class="sd">"""Determines whether or not LPA is done. It is complete when all nodes have</span></td></tr><tr><th id="L148"><a href="#L148">148</a></th><td><span class="sd">       a label that is in the set of highest frequency labels amongst its</span></td></tr><tr><th id="L149"><a href="#L149">149</a></th><td><span class="sd">       neighbors.</span></td></tr><tr><th id="L150"><a href="#L150">150</a></th><td><span class="sd"></span></td></tr><tr><th id="L151"><a href="#L151">151</a></th><td><span class="sd">       Nodes with no neighbors are themselves a community and are therefore</span></td></tr><tr><th id="L152"><a href="#L152">152</a></th><td><span class="sd">       labeled, hence the immediate if statement in the for loop.</span></td></tr><tr><th id="L153"><a href="#L153">153</a></th><td><span class="sd">    """</span></td></tr><tr><th id="L154"><a href="#L154">154</a></th><td>    <span class="k">for</span> node <span class="ow">in</span> network<span class="p">:</span></td></tr><tr><th id="L155"><a href="#L155">155</a></th><td>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span>network<span class="o">.</span>neighbors<span class="p">(</span>node<span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span></td></tr><tr><th id="L156"><a href="#L156">156</a></th><td>            counts <span class="o">=</span> __calculate_label_frequencies<span class="p">(</span> node <span class="p">,</span> labeling <span class="p">,</span> network <span class="p">)</span></td></tr><tr><th id="L157"><a href="#L157">157</a></th><td>            high_labels <span class="o">=</span> __select_labels_of_highest_frequency<span class="p">(</span> counts <span class="p">)</span></td></tr><tr><th id="L158"><a href="#L158">158</a></th><td>            <span class="k">if</span> labeling<span class="p">[</span>node<span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> high_labels<span class="p">:</span> <span class="k">return</span> <span class="bp">False</span></td></tr><tr><th id="L159"><a href="#L159">159</a></th><td>    <span class="k">return</span> <span class="bp">True</span></td></tr><tr><th id="L160"><a href="#L160">160</a></th><td></td></tr><tr><th id="L161"><a href="#L161">161</a></th><td><span class="k">def</span> <span class="nf">__select_labels_of_highest_frequency</span><span class="p">(</span> freqs <span class="p">):</span></td></tr><tr><th id="L162"><a href="#L162">162</a></th><td>    <span class="sd">"""Finds all labels of maximum frequency. Specified freqs must be a mapping</span></td></tr><tr><th id="L163"><a href="#L163">163</a></th><td><span class="sd">       from label to frequency of that label.</span></td></tr><tr><th id="L164"><a href="#L164">164</a></th><td><span class="sd"></span></td></tr><tr><th id="L165"><a href="#L165">165</a></th><td><span class="sd">       Returns a set.</span></td></tr><tr><th id="L166"><a href="#L166">166</a></th><td><span class="sd">    """</span></td></tr><tr><th id="L167"><a href="#L167">167</a></th><td>    labels <span class="o">=</span> <span class="nb">set</span><span class="p">()</span></td></tr><tr><th id="L168"><a href="#L168">168</a></th><td>    mx <span class="o">=</span> <span class="o">-</span><span class="p">(</span>sys<span class="o">.</span>maxint<span class="p">)</span> <span class="o">-</span> <span class="mi">1</span></td></tr><tr><th id="L169"><a href="#L169">169</a></th><td>    <span class="k">for</span> label<span class="p">,</span> freq <span class="ow">in</span> freqs<span class="o">.</span>items<span class="p">():</span></td></tr><tr><th id="L170"><a href="#L170">170</a></th><td>        <span class="k">if</span> mx <span class="o">&lt;=</span> freq<span class="p">:</span></td></tr><tr><th id="L171"><a href="#L171">171</a></th><td>            <span class="k">if</span> mx <span class="o">&lt;</span> freq<span class="p">:</span></td></tr><tr><th id="L172"><a href="#L172">172</a></th><td>                mx <span class="o">=</span> freq</td></tr><tr><th id="L173"><a href="#L173">173</a></th><td>                labels<span class="o">.</span>clear<span class="p">()</span></td></tr><tr><th id="L174"><a href="#L174">174</a></th><td>        labels<span class="o">.</span>add<span class="p">(</span> label <span class="p">)</span></td></tr><tr><th id="L175"><a href="#L175">175</a></th><td>    <span class="k">return</span> labels</td></tr><tr><th id="L176"><a href="#L176">176</a></th><td></td></tr><tr><th id="L177"><a href="#L177">177</a></th><td><span class="k">def</span> <span class="nf">__setup_verbosity</span><span class="p">(</span> verbosity <span class="p">):</span></td></tr><tr><th id="L178"><a href="#L178">178</a></th><td>    <span class="sd">"""Translates the command-line specified verbosity list (see program</span></td></tr><tr><th id="L179"><a href="#L179">179</a></th><td><span class="sd">       options) to the appropriate settings for verbosely explain the program's</span></td></tr><tr><th id="L180"><a href="#L180">180</a></th><td><span class="sd">       operations.</span></td></tr><tr><th id="L181"><a href="#L181">181</a></th><td><span class="sd"></span></td></tr><tr><th id="L182"><a href="#L182">182</a></th><td><span class="sd">       'verbosity' is the list created by the commandline arguments.</span></td></tr><tr><th id="L183"><a href="#L183">183</a></th><td><span class="sd">    """</span></td></tr><tr><th id="L184"><a href="#L184">184</a></th><td>    <span class="k">global</span> verbose_stream</td></tr><tr><th id="L185"><a href="#L185">185</a></th><td>    <span class="k">if</span> verbosity <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span></td></tr><tr><th id="L186"><a href="#L186">186</a></th><td>        verbose_stream <span class="o">=</span> <span class="bp">None</span></td></tr><tr><th id="L187"><a href="#L187">187</a></th><td>    <span class="k">else</span><span class="p">:</span></td></tr><tr><th id="L188"><a href="#L188">188</a></th><td>        last_stream <span class="o">=</span> verbosity<span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span></td></tr><tr><th id="L189"><a href="#L189">189</a></th><td>        verbose_stream <span class="o">=</span> <span class="p">(</span> sys<span class="o">.</span>stdout <span class="k">if</span> last_stream<span class="o">==</span><span class="s">"stdout"</span></td></tr><tr><th id="L190"><a href="#L190">190</a></th><td>                                      <span class="k">else</span> <span class="nb">open</span><span class="p">(</span>last_stream<span class="p">,</span><span class="s">"w"</span><span class="p">)</span> <span class="p">)</span></td></tr><tr><th id="L191"><a href="#L191">191</a></th><td></td></tr><tr><th id="L192"><a href="#L192">192</a></th><td><span class="k">def</span> <span class="nf">__uniquely_label</span><span class="p">(</span> network <span class="p">):</span></td></tr><tr><th id="L193"><a href="#L193">193</a></th><td>    <span class="sd">"""Gives a unique label (integer) to each node in the network."""</span></td></tr><tr><th id="L194"><a href="#L194">194</a></th><td>    labeling <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span></td></tr><tr><th id="L195"><a href="#L195">195</a></th><td>    <span class="k">for</span> n<span class="p">,</span> label <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span> network<span class="o">.</span>nodes<span class="p">()</span> <span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span>network<span class="p">))):</span></td></tr><tr><th id="L196"><a href="#L196">196</a></th><td>        labeling<span class="p">[</span>n<span class="p">]</span> <span class="o">=</span> label</td></tr><tr><th id="L197"><a href="#L197">197</a></th><td>    <span class="k">return</span> labeling</td></tr><tr><th id="L198"><a href="#L198">198</a></th><td></td></tr><tr><th id="L199"><a href="#L199">199</a></th><td><span class="k">def</span> <span class="nf">__update_labels</span><span class="p">(</span> labeling <span class="p">,</span> coloring <span class="p">,</span> network <span class="p">):</span></td></tr><tr><th id="L200"><a href="#L200">200</a></th><td>    <span class="sd">"""Updates labels of every single node in the network."""</span></td></tr><tr><th id="L201"><a href="#L201">201</a></th><td>    <span class="k">for</span> color<span class="p">,</span> nodes <span class="ow">in</span> coloring<span class="o">.</span>items<span class="p">():</span></td></tr><tr><th id="L202"><a href="#L202">202</a></th><td>        <span class="k">for</span> n <span class="ow">in</span> nodes<span class="p">:</span></td></tr><tr><th id="L203"><a href="#L203">203</a></th><td>            __update_label<span class="p">(</span> n <span class="p">,</span> labeling <span class="p">,</span> network <span class="p">)</span></td></tr><tr><th id="L204"><a href="#L204">204</a></th><td></td></tr><tr><th id="L205"><a href="#L205">205</a></th><td><span class="k">def</span> <span class="nf">__update_label</span><span class="p">(</span> node <span class="p">,</span> labeling <span class="p">,</span> network <span class="p">):</span></td></tr><tr><th id="L206"><a href="#L206">206</a></th><td>    <span class="sd">"""Updates the label of a SINGLE node in the network."""</span></td></tr><tr><th id="L207"><a href="#L207">207</a></th><td>    counts <span class="o">=</span> __calculate_label_frequencies<span class="p">(</span> node <span class="p">,</span> labeling <span class="p">,</span> network <span class="p">)</span></td></tr><tr><th id="L208"><a href="#L208">208</a></th><td>    high_labels <span class="o">=</span> __select_labels_of_highest_frequency<span class="p">(</span> counts <span class="p">)</span></td></tr><tr><th id="L209"><a href="#L209">209</a></th><td>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span>high_labels<span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span></td></tr><tr><th id="L210"><a href="#L210">210</a></th><td>        labeling<span class="p">[</span>node<span class="p">]</span> <span class="o">=</span> high_labels<span class="o">.</span>pop<span class="p">()</span></td></tr><tr><th id="L211"><a href="#L211">211</a></th><td>    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span>high_labels<span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span></td></tr><tr><th id="L212"><a href="#L212">212</a></th><td>        labeling<span class="p">[</span>node<span class="p">]</span> <span class="o">=</span> __break_color_tie<span class="p">(</span> labeling<span class="p">[</span>node<span class="p">]</span> <span class="p">,</span> high_labels <span class="p">)</span></td></tr><tr><th id="L213"><a href="#L213">213</a></th><td></td></tr><tr><th id="L214"><a href="#L214">214</a></th><td><span class="k">def</span> <span class="nf">__validate_opts_and_args</span><span class="p">(</span> opts <span class="p">,</span> args <span class="p">):</span></td></tr><tr><th id="L215"><a href="#L215">215</a></th><td>    <span class="sd">"""Makes sure that at least one file has been passed and that it exists.</span></td></tr><tr><th id="L216"><a href="#L216">216</a></th><td><span class="sd">       Also make sure that the version of the description file has been</span></td></tr><tr><th id="L217"><a href="#L217">217</a></th><td><span class="sd">       indicated via an option.</span></td></tr><tr><th id="L218"><a href="#L218">218</a></th><td><span class="sd">    """</span></td></tr><tr><th id="L219"><a href="#L219">219</a></th><td></td></tr><tr><th id="L220"><a href="#L220">220</a></th><td>    <span class="k">if</span> opts<span class="o">.</span>reader_format <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span>args<span class="p">)</span><span class="o">&lt;</span><span class="mi">1</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span>args<span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">:</span></td></tr><tr><th id="L221"><a href="#L221">221</a></th><td>        parser<span class="o">.</span>print_help<span class="p">()</span></td></tr><tr><th id="L222"><a href="#L222">222</a></th><td>        sys<span class="o">.</span>exit<span class="p">(</span> <span class="mi">1</span> <span class="p">)</span></td></tr><tr><th id="L223"><a href="#L223">223</a></th><td>    <span class="k">if</span> <span class="ow">not</span> os<span class="o">.</span>path<span class="o">.</span>exists<span class="p">(</span> args<span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">):</span> </td></tr><tr><th id="L224"><a href="#L224">224</a></th><td>        sys<span class="o">.</span>stderr<span class="o">.</span>write<span class="p">(</span> <span class="s">"File, {0}, does not exist.</span><span class="se">\n</span><span class="s">"</span><span class="o">.</span>format<span class="p">(</span>args<span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">)</span></td></tr><tr><th id="L225"><a href="#L225">225</a></th><td>        parser<span class="o">.</span>print_help<span class="p">()</span></td></tr><tr><th id="L226"><a href="#L226">226</a></th><td>        sys<span class="o">.</span>exit<span class="p">(</span> <span class="mi">1</span> <span class="p">)</span></td></tr><tr><th id="L227"><a href="#L227">227</a></th><td></td></tr><tr><th id="L228"><a href="#L228">228</a></th><td><span class="k">if</span> __name__ <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span></td></tr><tr><th id="L229"><a href="#L229">229</a></th><td>    sys<span class="o">.</span>exit<span class="p">(</span> main<span class="p">()</span> <span class="p">)</span></td></tr></tbody></table>

        </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/trac/raw-attachment/ticket/627/lpa.py">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/trac/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">Powered by <a href="/trac/about"><strong>Trac 0.12.3</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.</p>
      <p class="right"></p>
    </div>
    <div id="sitefooter">
    </div>
  </body>
</html>